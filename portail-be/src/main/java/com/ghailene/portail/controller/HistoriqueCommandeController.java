/*
 * Created on 2019-10-09 ( Date ISO 2019-10-09 - Time 11:43:59 )
 * Generated by JCharzyGen version 0
*/
package com.ghailene.portail.controller;
import com.ghailene.portail.entity.HistoriqueCommande;
import com.ghailene.portail.service.HistoriqueCommandeService ;
import com.ghailene.portail.dto.HistoriqueCommandeDto ;
import com.ghailene.portail.controller.exception.BadRequestException ;
import java.net.URISyntaxException;
import org.springframework.http.HttpStatus;
import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;

/**
 * REST controller for managing HistoriqueCommande .
 */
@RestController
@RequestMapping(value = "/api/historiqueCommande")
public class HistoriqueCommandeController {

	@Autowired
	private HistoriqueCommandeService historiqueCommandeService ;

	ModelMapper modelMapper = new ModelMapper();

	
    /**
     * GET  api/historiqueCommande/findAll : get all historiqueCommande .
     *
     * @return the ResponseEntity with status 200 (OK) and the list of historiqueCommande in body
     */

	@GetMapping("/findAll")
	@ApiOperation(value = "View a list of all available historiqueCommande ", response = ResponseEntity.class)
	public ResponseEntity<Object> getAllHistoriqueCommande(){
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(historiqueCommandeService.findAll(),HistoriqueCommandeDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * GET  api/historiqueCommande/findById/historiqueId : get the "id" location.
     *
     * @param historiqueId : the id of the historiqueCommande to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the historiqueCommande, or with status 404 (Not Found)
     */

	@GetMapping("/findById/{historiqueId}")
	@ApiOperation(value = "View specific available historiqueCommande ", response = ResponseEntity.class)
	public ResponseEntity<Object> getOneHistoriqueCommande(@PathVariable Long historiqueId){

		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(historiqueCommandeService.findOne(historiqueId),HistoriqueCommandeDto.class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * POST  api/historiqueCommande/save : Create a new historiqueCommande.
     *
     * @param historiqueCommande : the historiqueCommande to create
     * @return the ResponseEntity with status 201 (Created) and with body the new historiqueCommande, or with status 400 (Bad Request) if the historiqueCommande has already an ID
     * @throws URISyntaxException if the HistoriqueCommande URI syntax is incorrect
     */
	@PostMapping("/save")
	@ApiOperation(value = "Create a new historiqueCommande ", response = ResponseEntity.class)
	public ResponseEntity<Object> createHistoriqueCommande(@RequestBody HistoriqueCommandeDto in) throws URISyntaxException {
		
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(modelMapper.map(
					historiqueCommandeService.add(modelMapper.map(in, HistoriqueCommande.class)), HistoriqueCommandeDto.class));	
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}
	

	/**
     * PUT  api/historiqueCommande/update/historiqueId : Updates an existing historiqueCommande.
     *
	 * @param historiqueId : the id of the historiqueCommande to update
     * @param historiqueCommande :  the historiqueCommande to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated historiqueCommande,
     * or with status 400 (Bad Request) if the historiqueCommande is not valid,
     * or with status 500 (Internal Server Error) if the historiqueCommande couldn't be updated
     * @throws URISyntaxException if the HistoriqueCommande URI syntax is incorrect
     */
	@PutMapping("/update/{historiqueId}")
	@ApiOperation(value = "Update the historiqueCommande ", response = ResponseEntity.class)
	public ResponseEntity<Object> updateHistoriqueCommande(@PathVariable Long historiqueId, @RequestBody HistoriqueCommandeDto in) throws URISyntaxException {

        if (historiqueId == null) {
            throw new BadRequestException("Invalid id", "HistoriqueCommande", "idnull");
        }

        in.setHistoriqueId(historiqueId);

		try {
			return ResponseEntity.status(HttpStatus.OK).body(modelMapper.map(
					historiqueCommandeService.update(modelMapper.map(in, HistoriqueCommande.class)), HistoriqueCommandeDto.class));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}



    /**
     * DELETE  api/historiqueCommande/delete/historiqueId : delete the "id" historiqueCommande .
     *
     * @param id the id of the historiqueCommande to delete
     * @return the ResponseEntity with status 200 (OK)
     */

	@DeleteMapping("/delete/{historiqueId}")
	@ApiOperation(value = "Delete the historiqueCommande ", response = ResponseEntity.class)
	public ResponseEntity<Object> deleteHistoriqueCommande(@PathVariable Long historiqueId){
		
		try {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(historiqueCommandeService.delete(historiqueId));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByPage/{page}/{size}")
	@ApiOperation(value = "View (size) available historiqueCommande from (page)", response = ResponseEntity.class)
	public ResponseEntity<Object> getHistoriqueCommandeByPage(@PathVariable("page") int page, @PathVariable("size") int size){
				
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(historiqueCommandeService.findByPage(page, size),HistoriqueCommandeDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}

	@GetMapping("/count")
	@ApiOperation(value = "Count of all availables historiqueCommande", response = ResponseEntity.class)
	public ResponseEntity<Object> countHistoriqueCommande(){
		try{
			return ResponseEntity.ok()
							 .body(historiqueCommandeService.count());
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

}

