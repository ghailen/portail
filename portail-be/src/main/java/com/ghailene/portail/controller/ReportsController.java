/*
 * Created on 2019-10-09 ( Date ISO 2019-10-09 - Time 11:43:59 )
 * Generated by JCharzyGen version 0
*/
package com.ghailene.portail.controller;
import com.ghailene.portail.entity.Reports;
import com.ghailene.portail.service.ReportsService ;
import com.ghailene.portail.dto.ReportsDto ;
import com.ghailene.portail.controller.exception.BadRequestException ;
import java.net.URISyntaxException;
import org.springframework.http.HttpStatus;
import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;

/**
 * REST controller for managing Reports .
 */
@RestController
@RequestMapping(value = "/api/reports")
public class ReportsController {

	@Autowired
	private ReportsService reportsService ;

	ModelMapper modelMapper = new ModelMapper();

	
    /**
     * GET  api/reports/findAll : get all reports .
     *
     * @return the ResponseEntity with status 200 (OK) and the list of reports in body
     */

	@GetMapping("/findAll")
	@ApiOperation(value = "View a list of all available reports ", response = ResponseEntity.class)
	public ResponseEntity<Object> getAllReports(){
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(reportsService.findAll(),ReportsDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * GET  api/reports/findById/reportId : get the "id" location.
     *
     * @param reportId : the id of the reports to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the reports, or with status 404 (Not Found)
     */

	@GetMapping("/findById/{reportId}")
	@ApiOperation(value = "View specific available reports ", response = ResponseEntity.class)
	public ResponseEntity<Object> getOneReports(@PathVariable Long reportId){

		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(reportsService.findOne(reportId),ReportsDto.class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * POST  api/reports/save : Create a new reports.
     *
     * @param reports : the reports to create
     * @return the ResponseEntity with status 201 (Created) and with body the new reports, or with status 400 (Bad Request) if the reports has already an ID
     * @throws URISyntaxException if the Reports URI syntax is incorrect
     */
	@PostMapping("/save")
	@ApiOperation(value = "Create a new reports ", response = ResponseEntity.class)
	public ResponseEntity<Object> createReports(@RequestBody ReportsDto in) throws URISyntaxException {
		
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(modelMapper.map(
					reportsService.add(modelMapper.map(in, Reports.class)), ReportsDto.class));	
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}
	

	/**
     * PUT  api/reports/update/reportId : Updates an existing reports.
     *
	 * @param reportId : the id of the reports to update
     * @param reports :  the reports to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated reports,
     * or with status 400 (Bad Request) if the reports is not valid,
     * or with status 500 (Internal Server Error) if the reports couldn't be updated
     * @throws URISyntaxException if the Reports URI syntax is incorrect
     */
	@PutMapping("/update/{reportId}")
	@ApiOperation(value = "Update the reports ", response = ResponseEntity.class)
	public ResponseEntity<Object> updateReports(@PathVariable Long reportId, @RequestBody ReportsDto in) throws URISyntaxException {

        if (reportId == null) {
            throw new BadRequestException("Invalid id", "Reports", "idnull");
        }

        in.setReportId(reportId);

		try {
			return ResponseEntity.status(HttpStatus.OK).body(modelMapper.map(
					reportsService.update(modelMapper.map(in, Reports.class)), ReportsDto.class));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}



    /**
     * DELETE  api/reports/delete/reportId : delete the "id" reports .
     *
     * @param id the id of the reports to delete
     * @return the ResponseEntity with status 200 (OK)
     */

	@DeleteMapping("/delete/{reportId}")
	@ApiOperation(value = "Delete the reports ", response = ResponseEntity.class)
	public ResponseEntity<Object> deleteReports(@PathVariable Long reportId){
		
		try {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(reportsService.delete(reportId));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByPage/{page}/{size}")
	@ApiOperation(value = "View (size) available reports from (page)", response = ResponseEntity.class)
	public ResponseEntity<Object> getReportsByPage(@PathVariable("page") int page, @PathVariable("size") int size){
				
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(reportsService.findByPage(page, size),ReportsDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}

	@GetMapping("/count")
	@ApiOperation(value = "Count of all availables reports", response = ResponseEntity.class)
	public ResponseEntity<Object> countReports(){
		try{
			return ResponseEntity.ok()
							 .body(reportsService.count());
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

}

