/*
 * Created on 2019-10-09 ( Date ISO 2019-10-09 - Time 11:43:59 )
 * Generated by JCharzyGen version 0
*/
package com.ghailene.portail.controller;
import com.ghailene.portail.entity.Panier;
import com.ghailene.portail.service.PanierService ;
import com.ghailene.portail.dto.PanierDto ;
import com.ghailene.portail.controller.exception.BadRequestException ;
import java.net.URISyntaxException;
import org.springframework.http.HttpStatus;
import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;

/**
 * REST controller for managing Panier .
 */
@RestController
@RequestMapping(value = "/api/panier")
public class PanierController {

	@Autowired
	private PanierService panierService ;

	ModelMapper modelMapper = new ModelMapper();

	
    /**
     * GET  api/panier/findAll : get all panier .
     *
     * @return the ResponseEntity with status 200 (OK) and the list of panier in body
     */

	@GetMapping("/findAll")
	@ApiOperation(value = "View a list of all available panier ", response = ResponseEntity.class)
	public ResponseEntity<Object> getAllPanier(){
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(panierService.findAll(),PanierDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * GET  api/panier/findById/panierId : get the "id" location.
     *
     * @param panierId : the id of the panier to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the panier, or with status 404 (Not Found)
     */

	@GetMapping("/findById/{panierId}")
	@ApiOperation(value = "View specific available panier ", response = ResponseEntity.class)
	public ResponseEntity<Object> getOnePanier(@PathVariable Long panierId){

		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(panierService.findOne(panierId),PanierDto.class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * POST  api/panier/save : Create a new panier.
     *
     * @param panier : the panier to create
     * @return the ResponseEntity with status 201 (Created) and with body the new panier, or with status 400 (Bad Request) if the panier has already an ID
     * @throws URISyntaxException if the Panier URI syntax is incorrect
     */
	@PostMapping("/save")
	@ApiOperation(value = "Create a new panier ", response = ResponseEntity.class)
	public ResponseEntity<Object> createPanier(@RequestBody PanierDto in) throws URISyntaxException {
		
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(modelMapper.map(
					panierService.add(modelMapper.map(in, Panier.class)), PanierDto.class));	
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}
	

	/**
     * PUT  api/panier/update/panierId : Updates an existing panier.
     *
	 * @param panierId : the id of the panier to update
     * @param panier :  the panier to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated panier,
     * or with status 400 (Bad Request) if the panier is not valid,
     * or with status 500 (Internal Server Error) if the panier couldn't be updated
     * @throws URISyntaxException if the Panier URI syntax is incorrect
     */
	@PutMapping("/update/{panierId}")
	@ApiOperation(value = "Update the panier ", response = ResponseEntity.class)
	public ResponseEntity<Object> updatePanier(@PathVariable Long panierId, @RequestBody PanierDto in) throws URISyntaxException {

        if (panierId == null) {
            throw new BadRequestException("Invalid id", "Panier", "idnull");
        }

        in.setPanierId(panierId);

		try {
			return ResponseEntity.status(HttpStatus.OK).body(modelMapper.map(
					panierService.update(modelMapper.map(in, Panier.class)), PanierDto.class));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}



    /**
     * DELETE  api/panier/delete/panierId : delete the "id" panier .
     *
     * @param id the id of the panier to delete
     * @return the ResponseEntity with status 200 (OK)
     */

	@DeleteMapping("/delete/{panierId}")
	@ApiOperation(value = "Delete the panier ", response = ResponseEntity.class)
	public ResponseEntity<Object> deletePanier(@PathVariable Long panierId){
		
		try {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(panierService.delete(panierId));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByPage/{page}/{size}")
	@ApiOperation(value = "View (size) available panier from (page)", response = ResponseEntity.class)
	public ResponseEntity<Object> getPanierByPage(@PathVariable("page") int page, @PathVariable("size") int size){
				
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(panierService.findByPage(page, size),PanierDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}

	@GetMapping("/count")
	@ApiOperation(value = "Count of all availables panier", response = ResponseEntity.class)
	public ResponseEntity<Object> countPanier(){
		try{
			return ResponseEntity.ok()
							 .body(panierService.count());
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

}

