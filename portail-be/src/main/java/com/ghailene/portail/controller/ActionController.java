/*
 * Created on 2019-10-09 ( Date ISO 2019-10-09 - Time 11:43:59 )
 * Generated by JCharzyGen version 0
*/
package com.ghailene.portail.controller;
import com.ghailene.portail.entity.Action;
import com.ghailene.portail.service.ActionService ;
import com.ghailene.portail.dto.ActionDto ;
import com.ghailene.portail.controller.exception.BadRequestException ;
import java.net.URISyntaxException;
import org.springframework.http.HttpStatus;
import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;

/**
 * REST controller for managing Action .
 */
@RestController
@RequestMapping(value = "/api/action")
public class ActionController {

	@Autowired
	private ActionService actionService ;

	ModelMapper modelMapper = new ModelMapper();

	
    /**
     * GET  api/action/findAll : get all action .
     *
     * @return the ResponseEntity with status 200 (OK) and the list of action in body
     */

	@GetMapping("/findAll")
	@ApiOperation(value = "View a list of all available action ", response = ResponseEntity.class)
	public ResponseEntity<Object> getAllAction(){
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(actionService.findAll(),ActionDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * GET  api/action/findById/actionId : get the "id" location.
     *
     * @param actionId : the id of the action to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the action, or with status 404 (Not Found)
     */

	@GetMapping("/findById/{actionId}")
	@ApiOperation(value = "View specific available action ", response = ResponseEntity.class)
	public ResponseEntity<Object> getOneAction(@PathVariable Long actionId){

		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(actionService.findOne(actionId),ActionDto.class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * POST  api/action/save : Create a new action.
     *
     * @param action : the action to create
     * @return the ResponseEntity with status 201 (Created) and with body the new action, or with status 400 (Bad Request) if the action has already an ID
     * @throws URISyntaxException if the Action URI syntax is incorrect
     */
	@PostMapping("/save")
	@ApiOperation(value = "Create a new action ", response = ResponseEntity.class)
	public ResponseEntity<Object> createAction(@RequestBody ActionDto in) throws URISyntaxException {
		
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(modelMapper.map(
					actionService.add(modelMapper.map(in, Action.class)), ActionDto.class));	
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}
	

	/**
     * PUT  api/action/update/actionId : Updates an existing action.
     *
	 * @param actionId : the id of the action to update
     * @param action :  the action to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated action,
     * or with status 400 (Bad Request) if the action is not valid,
     * or with status 500 (Internal Server Error) if the action couldn't be updated
     * @throws URISyntaxException if the Action URI syntax is incorrect
     */
	@PutMapping("/update/{actionId}")
	@ApiOperation(value = "Update the action ", response = ResponseEntity.class)
	public ResponseEntity<Object> updateAction(@PathVariable Long actionId, @RequestBody ActionDto in) throws URISyntaxException {

        if (actionId == null) {
            throw new BadRequestException("Invalid id", "Action", "idnull");
        }

        in.setActionId(actionId);

		try {
			return ResponseEntity.status(HttpStatus.OK).body(modelMapper.map(
					actionService.update(modelMapper.map(in, Action.class)), ActionDto.class));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}



    /**
     * DELETE  api/action/delete/actionId : delete the "id" action .
     *
     * @param id the id of the action to delete
     * @return the ResponseEntity with status 200 (OK)
     */

	@DeleteMapping("/delete/{actionId}")
	@ApiOperation(value = "Delete the action ", response = ResponseEntity.class)
	public ResponseEntity<Object> deleteAction(@PathVariable Long actionId){
		
		try {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(actionService.delete(actionId));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByPage/{page}/{size}")
	@ApiOperation(value = "View (size) available action from (page)", response = ResponseEntity.class)
	public ResponseEntity<Object> getActionByPage(@PathVariable("page") int page, @PathVariable("size") int size){
				
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(actionService.findByPage(page, size),ActionDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}

	@GetMapping("/count")
	@ApiOperation(value = "Count of all availables action", response = ResponseEntity.class)
	public ResponseEntity<Object> countAction(){
		try{
			return ResponseEntity.ok()
							 .body(actionService.count());
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

}

