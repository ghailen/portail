/*
 * Created on 2019-10-09 ( Date ISO 2019-10-09 - Time 11:43:59 )
 * Generated by JCharzyGen version 0
*/
package com.ghailene.portail.controller;
import com.ghailene.portail.entity.Commande;
import com.ghailene.portail.entity.OffreService;
import com.ghailene.portail.service.CommandeService ;
import com.ghailene.portail.dto.CommandeDto ;
import com.ghailene.portail.controller.exception.BadRequestException ;
import java.net.URISyntaxException;
import java.util.List;
import org.springframework.http.HttpStatus;
import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;

/**
 * REST controller for managing Commande .
 */
@RestController
@RequestMapping(value = "/api/commande")
public class CommandeController {

	@Autowired
	private CommandeService commandeService ;

	ModelMapper modelMapper = new ModelMapper();

	
    /**
     * GET  api/commande/findAll : get all commande .
     *
     * @return the ResponseEntity with status 200 (OK) and the list of commande in body
     */

	@GetMapping("/findAll")
	@ApiOperation(value = "View a list of all available commande ", response = ResponseEntity.class)
	public ResponseEntity<Object> getAllCommande(){
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(commandeService.findAll(),CommandeDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByStatus/{status}")
	@ApiOperation(value = "View specific available commande ", response = ResponseEntity.class)
	public List<Commande> getCommandeByStatus(@PathVariable String status){

		try{
			return commandeService.findByStatus(status);
		}catch(Exception e) {
			e.printStackTrace();
			return (List<Commande>) ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	
    /**
     * GET  api/commande/findById/commandeId : get the "id" location.
     *
     * @param commandeId : the id of the commande to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the commande, or with status 404 (Not Found)
     */

	@GetMapping("/findById/{commandeId}")
	@ApiOperation(value = "View specific available commande ", response = ResponseEntity.class)
	public ResponseEntity<Object> getOneCommande(@PathVariable Long commandeId){

		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(commandeService.findOne(commandeId),CommandeDto.class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * POST  api/commande/save : Create a new commande.
     *
     * @param commande : the commande to create
     * @return the ResponseEntity with status 201 (Created) and with body the new commande, or with status 400 (Bad Request) if the commande has already an ID
     * @throws URISyntaxException if the Commande URI syntax is incorrect
     */
	@PostMapping("/save")
	@ApiOperation(value = "Create a new commande ", response = ResponseEntity.class)
	public ResponseEntity<Object> createCommande(@RequestBody CommandeDto in) throws URISyntaxException {
		
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(modelMapper.map(
					commandeService.add(modelMapper.map(in, Commande.class)), CommandeDto.class));	
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}
	

	/**
     * PUT  api/commande/update/commandeId : Updates an existing commande.
     *
	 * @param commandeId : the id of the commande to update
     * @param commande :  the commande to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated commande,
     * or with status 400 (Bad Request) if the commande is not valid,
     * or with status 500 (Internal Server Error) if the commande couldn't be updated
     * @throws URISyntaxException if the Commande URI syntax is incorrect
     */
	@PutMapping("/update/{commandeId}")
	@ApiOperation(value = "Update the commande ", response = ResponseEntity.class)
	public ResponseEntity<Object> updateCommande(@PathVariable Long commandeId, @RequestBody CommandeDto in) throws URISyntaxException {

        if (commandeId == null) {
            throw new BadRequestException("Invalid id", "Commande", "idnull");
        }

        in.setCommandeId(commandeId);

		try {
			return ResponseEntity.status(HttpStatus.OK).body(modelMapper.map(
					commandeService.update(modelMapper.map(in, Commande.class)), CommandeDto.class));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * DELETE  api/commande/delete/commandeId : delete the "id" commande .
     *
     * @param id the id of the commande to delete
     * @return the ResponseEntity with status 200 (OK)
     */

	@DeleteMapping("/delete/{commandeId}")
	@ApiOperation(value = "Delete the commande ", response = ResponseEntity.class)
	public ResponseEntity<Object> deleteCommande(@PathVariable Long commandeId){
		
		try {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(commandeService.delete(commandeId));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByPage/{page}/{size}")
	@ApiOperation(value = "View (size) available commande from (page)", response = ResponseEntity.class)
	public ResponseEntity<Object> getCommandeByPage(@PathVariable("page") int page, @PathVariable("size") int size){
				
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(commandeService.findByPage(page, size),CommandeDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}

	@GetMapping("/count")
	@ApiOperation(value = "Count of all availables commande", response = ResponseEntity.class)
	public ResponseEntity<Object> countCommande(){
		try{
			return ResponseEntity.ok()
							 .body(commandeService.count());
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

}

