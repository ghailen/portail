/*
 * Created on 2019-10-09 ( Date ISO 2019-10-09 - Time 11:43:59 )
 * Generated by JCharzyGen version 0
*/
package com.ghailene.portail.controller;
import com.ghailene.portail.entity.Alerts;
import com.ghailene.portail.service.AlertsService ;
import com.ghailene.portail.dto.AlertsDto ;
import com.ghailene.portail.controller.exception.BadRequestException ;
import java.net.URISyntaxException;
import org.springframework.http.HttpStatus;
import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;

/**
 * REST controller for managing Alerts .
 */
@RestController
@RequestMapping(value = "/api/alerts")
public class AlertsController {

	@Autowired
	private AlertsService alertsService ;

	ModelMapper modelMapper = new ModelMapper();

	
    /**
     * GET  api/alerts/findAll : get all alerts .
     *
     * @return the ResponseEntity with status 200 (OK) and the list of alerts in body
     */

	@GetMapping("/findAll")
	@ApiOperation(value = "View a list of all available alerts ", response = ResponseEntity.class)
	public ResponseEntity<Object> getAllAlerts(){
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(alertsService.findAll(),AlertsDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * GET  api/alerts/findById/alertId : get the "id" location.
     *
     * @param alertId : the id of the alerts to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the alerts, or with status 404 (Not Found)
     */

	@GetMapping("/findById/{alertId}")
	@ApiOperation(value = "View specific available alerts ", response = ResponseEntity.class)
	public ResponseEntity<Object> getOneAlerts(@PathVariable Long alertId){

		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(alertsService.findOne(alertId),AlertsDto.class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * POST  api/alerts/save : Create a new alerts.
     *
     * @param alerts : the alerts to create
     * @return the ResponseEntity with status 201 (Created) and with body the new alerts, or with status 400 (Bad Request) if the alerts has already an ID
     * @throws URISyntaxException if the Alerts URI syntax is incorrect
     */
	@PostMapping("/save")
	@ApiOperation(value = "Create a new alerts ", response = ResponseEntity.class)
	public ResponseEntity<Object> createAlerts(@RequestBody AlertsDto in) throws URISyntaxException {
		
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(modelMapper.map(
					alertsService.add(modelMapper.map(in, Alerts.class)), AlertsDto.class));	
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}
	

	/**
     * PUT  api/alerts/update/alertId : Updates an existing alerts.
     *
	 * @param alertId : the id of the alerts to update
     * @param alerts :  the alerts to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated alerts,
     * or with status 400 (Bad Request) if the alerts is not valid,
     * or with status 500 (Internal Server Error) if the alerts couldn't be updated
     * @throws URISyntaxException if the Alerts URI syntax is incorrect
     */
	@PutMapping("/update/{alertId}")
	@ApiOperation(value = "Update the alerts ", response = ResponseEntity.class)
	public ResponseEntity<Object> updateAlerts(@PathVariable Long alertId, @RequestBody AlertsDto in) throws URISyntaxException {

        if (alertId == null) {
            throw new BadRequestException("Invalid id", "Alerts", "idnull");
        }

        in.setAlertId(alertId);

		try {
			return ResponseEntity.status(HttpStatus.OK).body(modelMapper.map(
					alertsService.update(modelMapper.map(in, Alerts.class)), AlertsDto.class));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}



    /**
     * DELETE  api/alerts/delete/alertId : delete the "id" alerts .
     *
     * @param id the id of the alerts to delete
     * @return the ResponseEntity with status 200 (OK)
     */

	@DeleteMapping("/delete/{alertId}")
	@ApiOperation(value = "Delete the alerts ", response = ResponseEntity.class)
	public ResponseEntity<Object> deleteAlerts(@PathVariable Long alertId){
		
		try {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(alertsService.delete(alertId));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByPage/{page}/{size}")
	@ApiOperation(value = "View (size) available alerts from (page)", response = ResponseEntity.class)
	public ResponseEntity<Object> getAlertsByPage(@PathVariable("page") int page, @PathVariable("size") int size){
				
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(alertsService.findByPage(page, size),AlertsDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}

	@GetMapping("/count")
	@ApiOperation(value = "Count of all availables alerts", response = ResponseEntity.class)
	public ResponseEntity<Object> countAlerts(){
		try{
			return ResponseEntity.ok()
							 .body(alertsService.count());
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

}

