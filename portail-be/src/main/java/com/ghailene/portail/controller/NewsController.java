/*
 * Created on 2019-10-09 ( Date ISO 2019-10-09 - Time 11:43:59 )
 * Generated by JCharzyGen version 0
*/
package com.ghailene.portail.controller;
import com.ghailene.portail.entity.News;
import com.ghailene.portail.service.NewsService ;
import com.ghailene.portail.dto.NewsDto ;
import com.ghailene.portail.controller.exception.BadRequestException ;
import java.net.URISyntaxException;
import org.springframework.http.HttpStatus;
import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;

/**
 * REST controller for managing News .
 */
@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping(value = "/api/news")
public class NewsController {

	@Autowired
	private NewsService newsService ;

	ModelMapper modelMapper = new ModelMapper();

	
    /**
     * GET  api/news/findAll : get all news .
     *
     * @return the ResponseEntity with status 200 (OK) and the list of news in body
     */

	@GetMapping("/findAll")
	@ApiOperation(value = "View a list of all available news ", response = ResponseEntity.class)
	public ResponseEntity<Object> getAllNews(){
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(newsService.findAll(),NewsDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * GET  api/news/findById/newsId : get the "id" location.
     *
     * @param newsId : the id of the news to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the news, or with status 404 (Not Found)
     */

	@GetMapping("/findById/{newsId}")
	@ApiOperation(value = "View specific available news ", response = ResponseEntity.class)
	public ResponseEntity<Object> getOneNews(@PathVariable Long newsId){

		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(newsService.findOne(newsId),NewsDto.class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

    /**
     * POST  api/news/save : Create a new news.
     *
     * @param news : the news to create
     * @return the ResponseEntity with status 201 (Created) and with body the new news, or with status 400 (Bad Request) if the news has already an ID
     * @throws URISyntaxException if the News URI syntax is incorrect
     */
	@PostMapping("/save")
	@ApiOperation(value = "Create a new news ", response = ResponseEntity.class)
	public ResponseEntity<Object> createNews(@RequestBody NewsDto in) throws URISyntaxException {
		
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(modelMapper.map(
					newsService.add(modelMapper.map(in, News.class)), NewsDto.class));	
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}
	

	/**
     * PUT  api/news/update/newsId : Updates an existing news.
     *
	 * @param newsId : the id of the news to update
     * @param news :  the news to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated news,
     * or with status 400 (Bad Request) if the news is not valid,
     * or with status 500 (Internal Server Error) if the news couldn't be updated
     * @throws URISyntaxException if the News URI syntax is incorrect
     */
	@PutMapping("/update/{newsId}")
	@ApiOperation(value = "Update the news ", response = ResponseEntity.class)
	public ResponseEntity<Object> updateNews(@PathVariable Long newsId, @RequestBody NewsDto in) throws URISyntaxException {

        if (newsId == null) {
            throw new BadRequestException("Invalid id", "News", "idnull");
        }

        in.setNewsId(newsId);

		try {
			return ResponseEntity.status(HttpStatus.OK).body(modelMapper.map(
					newsService.update(modelMapper.map(in, News.class)), NewsDto.class));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}



    /**
     * DELETE  api/news/delete/newsId : delete the "id" news .
     *
     * @param id the id of the news to delete
     * @return the ResponseEntity with status 200 (OK)
     */

	@DeleteMapping("/delete/{newsId}")
	@ApiOperation(value = "Delete the news ", response = ResponseEntity.class)
	public ResponseEntity<Object> deleteNews(@PathVariable Long newsId){
		
		try {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(newsService.delete(newsId));			
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

	@GetMapping("/findByPage/{page}/{size}")
	@ApiOperation(value = "View (size) available news from (page)", response = ResponseEntity.class)
	public ResponseEntity<Object> getNewsByPage(@PathVariable("page") int page, @PathVariable("size") int size){
				
		try{
			return ResponseEntity.ok()
							 .body(modelMapper.map(newsService.findByPage(page, size),NewsDto[].class));
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}

	}

	@GetMapping("/count")
	@ApiOperation(value = "Count of all availables news", response = ResponseEntity.class)
	public ResponseEntity<Object> countNews(){
		try{
			return ResponseEntity.ok()
							 .body(newsService.count());
		}catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("server.error");
		}
	}

}

